'use client';
'use strict';

var React = require('react');
var core = require('@mantine/core');
var hooks = require('@mantine/hooks');
var Dropzone = require('./Dropzone.cjs');
var Dropzone_module = require('./Dropzone.module.css.cjs');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

const defaultProps = {
  loading: false,
  maxSize: Infinity,
  activateOnClick: false,
  activateOnDrag: true,
  dragEventsBubbling: true,
  activateOnKeyboard: true,
  active: true,
  zIndex: core.getDefaultZIndex("max"),
  withinPortal: true
};
const DropzoneFullScreen = core.factory((_props, ref) => {
  const props = core.useProps("DropzoneFullScreen", defaultProps, _props);
  const {
    classNames,
    className,
    style,
    styles,
    unstyled,
    vars,
    active,
    onDrop,
    onReject,
    zIndex,
    withinPortal,
    portalProps,
    ...others
  } = props;
  const getStyles = core.useStyles({
    name: "DropzoneFullScreen",
    classes: Dropzone_module,
    props,
    className,
    style,
    classNames,
    styles,
    unstyled,
    rootSelector: "fullScreen"
  });
  const { resolvedClassNames, resolvedStyles } = core.useResolvedStylesApi({
    classNames,
    styles,
    props
  });
  const [counter, setCounter] = React.useState(0);
  const [visible, { open, close }] = hooks.useDisclosure(false);
  const handleDragEnter = (event) => {
    if (event.dataTransfer?.types.includes("Files")) {
      setCounter((prev) => prev + 1);
      open();
    }
  };
  const handleDragLeave = () => {
    setCounter((prev) => prev - 1);
  };
  React.useEffect(() => {
    counter === 0 && close();
  }, [counter]);
  React.useEffect(() => {
    if (!active)
      return void 0;
    document.addEventListener("dragenter", handleDragEnter, false);
    document.addEventListener("dragleave", handleDragLeave, false);
    return () => {
      document.removeEventListener("dragenter", handleDragEnter, false);
      document.removeEventListener("dragleave", handleDragLeave, false);
    };
  }, [active]);
  return /* @__PURE__ */ React__default.default.createElement(core.OptionalPortal, { ...portalProps, withinPortal }, /* @__PURE__ */ React__default.default.createElement(
    core.Box,
    {
      ...getStyles("fullScreen", {
        style: { opacity: visible ? 1 : 0, pointerEvents: visible ? "all" : "none", zIndex }
      }),
      ref
    },
    /* @__PURE__ */ React__default.default.createElement(
      Dropzone.Dropzone,
      {
        ...others,
        classNames: resolvedClassNames,
        styles: resolvedStyles,
        unstyled,
        className: Dropzone_module.dropzone,
        onDrop: (files) => {
          onDrop?.(files);
          close();
          setCounter(0);
        },
        onReject: (files) => {
          onReject?.(files);
          close();
          setCounter(0);
        }
      }
    )
  ));
});
DropzoneFullScreen.classes = Dropzone_module;
DropzoneFullScreen.displayName = "@mantine/dropzone/DropzoneFullScreen";

exports.DropzoneFullScreen = DropzoneFullScreen;
//# sourceMappingURL=DropzoneFullScreen.cjs.map
